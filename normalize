#!/usr/bin/env python3


import sys, argparse
from bs4 import UnicodeDammit
import re
import os


def normalize(buffer):
    global changes
    
    # Convert encoding
    dammit = UnicodeDammit(buffer, ['utf-8'])
    encoding = dammit.original_encoding
    if encoding == 'utf-8' and buffer[:3] == b'\xef\xbb\xbf':
        encoding = 'utf-8-bom'
    if not (encoding == 'ascii' or encoding == 'utf-8'):
        log(f'Converting {encoding} encoding to utf-8')
        changes = True
    buffer = dammit.unicode_markup.encode('utf-8')
    
    # Convert line terminators
    if buffer.count(b'\r\n') > 0:
        line_terminator = 'CRLF'
        log('Converting CRLF line terminators to LF')
        buffer = buffer.replace(b'\r\n', b'\n')
        changes = True
    elif buffer.count(b'\r') > buffer.count(b'\n'):
        line_terminator = 'CR'
        log('Converting CR line terminators to LF')
        buffer = buffer.replace(b'\r', b'\n')
        changes = True
    else:
        line_terminator = 'LF'
    
    # Ensure trailing newline
    if not buffer.endswith(b'\n'):
        log('Adding trailing newline')
        buffer = buffer + b'\n'
        changes = True
    
    return buffer


def log(message):
    if args.verbose:
        print(f'DEBUG: normalize: {current_file}: {message}', file = sys.stderr)


def get_vars(fpath):
    fname = os.path.basename(fpath)
    vars = {
        'fpath': fpath,
        'fname': fname,
        'fdir': os.path.dirname(fpath),
        'fbase': os.path.splitext(fname)[0],
        'fext': os.path.splitext(fname)[1]
    }
    return vars


def main():
    global args, current_file, changes
    changes = False
    parser = argparse.ArgumentParser()
    parser.add_argument('input', nargs = '*', default = [sys.stdin], type = argparse.FileType('rb'))
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-o', '--output', default = sys.stdout.buffer, type = argparse.FileType('wb'))
    group.add_argument('-i', '--in-place', action = 'store_true')
    group.add_argument('-n', '--dry-run', action = 'store_true')
    parser.add_argument('--backup')
    parser.add_argument('-v', '--verbose', action = 'store_true')
    parser.add_argument('--version', action = 'version', version = '0.1')
    args = parser.parse_args()
    # also: ensure idempotence (`normalize` yields the same output as `normalize | normalize | normalize | ...`)

    if len(sys.argv[1:]) == 0 and sys.stdin.isatty():
        parser.print_help()
        exit()
    
    if args.backup and not args.in_place:
        sys.stderr.write('Warning: --backup only makes sense when used with --in-place\n')
    
    # running `./normalize.py notes.md |:` leads to the following error:
    # BrokenPipeError: [Errno 32] Broken pipe
    # have a look at this possible solution:
    # https://stackoverflow.com/a/35761190

    if not args.in_place and not args.dry_run:
        if args.output == sys.stdout:
            args.output = sys.stdout.buffer
        for file in args.input:
            current_file = file.name
            if file == sys.stdin:
                file = sys.stdin.buffer
            file_contents = file.read()
            file.close()
            normalized = normalize(file_contents)
            args.output.write(normalized)
            # args.output.flush()
        args.output.close()
    elif args.in_place:
        for file in args.input:
            if file == sys.stdin:
                sys.stderr.write('Error: cannot modify stdin in place\n')
            else:
                current_file = file.name
                file_contents = file.read()
                file.close()
                normalized = normalize(file_contents)
                if args.backup:
                    vars = get_vars(file.name)
                    backup_filename = re.sub(r'\$(' + '|'.join(vars) + ')',
                                             lambda var: vars[var.group(1)],
                                             args.backup)
                    try:
                        backup_file = open(backup_filename, 'wb')
                        backup_file.write(file_contents)
                        backup_file.close()
                    except PermissionError:
                        sys.stderr.write('Error: cannot create backup file\n')
                        continue
                try:
                    output = open(current_file, 'wb')
                    output.write(normalized)
                    output.close()
                except PermissionError:
                    sys.stderr.write('Error: cannot write to file\n')
    elif args.dry_run:
        args.verbose = True
        for file in args.input:
            current_file = file.name
            file_contents = file.read()
            file.close()
            normalize(file_contents)


if __name__ == '__main__':
    main()
